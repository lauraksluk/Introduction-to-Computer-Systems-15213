************
Instructions
************
* This Questionnaire is intended to test your understanding of shell related concepts.
* Each question carries 1 pt.
* Replace the comments in the space after each question with your answer.
* Answer the questions in 1-2 sentences.

*********
Questions
*********

After graduation, you joined an early-stage embedded systems startup that uses signals to trigger certain IoT functionalities.
While dealing with a bug, you found code that uses a global linked list to store the status (running or reaped) of child processes in the system.
Elements are being added or deleted in the linked list to keep track of jobs, even though the maximum number of child processes running concurrently is a constant.
You also note that the linked list is being manipulated within both the signal handlers and the rest of the program alike, without any particular precautions.
Having taken 1x-x13, you know this is a bad design.

1. How will you explain to your teammates that this design is bad? (1 pt)

This design is bad because it is manipulating global data structures within signal handlers, when signal handler functions should only
be on the signal (atomic) level. Concurrency results in data corruption; there could be signals received in the middle of running the 
signal code handlers.

After listening to your explanation, your teammates ask you a couple more questions regarding your new proposed solution:

2. The shell is required to wait until a foreground job is no longer running before allowing a user to start a new job.
What is the preferred method of implementing this kind of waiting and why is it so?
[Note: Remember that background jobs are also in the picture while thinking of a solution.]

The current foreground job could be turned into a background job, and the new job can then be executed in the forground.
Additionally, sigsuspend() can be used to wait for the signal that it was finished.

3. Since signals are not queued, how do you guarantee that all your children are reaped when handling SIGCHLD signals? (1pt)

Placing wait() inside a while loop to reap all children, with the wait() command returning an integer larger than 0, as the loop guard. 
The loop will stop executing when the wait function returns -1, which is when there are no more children to reap.

4. The shell implementation requires that a parent adds child processes to a job list before it deletes them.
However, it is possible that a child exits before the parent is able to do this.
How can we ensure that a child is always added to a job list before it is deleted?

To ensure that a child is added to the job list before it is deleted, in the case that it exits before the parent, is to
block signals (SIGCHLD that indicates child stopped/terminated) before adding to a job list, and unblock them after.

Further exploring the code, you find that printf is being used for logging and debugging in the signal handler functions.
Again, you know straight away that this is bad practice.

5. Why is using printf a bad idea? What kind of functions can be used in signal handlers? (1pt)

Using printf is a bad idea because it is not async-signal-safe; it results in deadlocks.
Functions that can be used in signal handlers are either reentrant (all variables)
are stored on the stack frame) or it is on the atomic level with respect to signals; functions whose
execution cannot be interruped by a signal handler can be safely used.

